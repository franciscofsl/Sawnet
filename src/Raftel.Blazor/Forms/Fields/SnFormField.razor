@inherits SnComponentBase
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Raftel.Blazor.Forms.Fields.Types
@using System.Globalization
@using Raftel.Shared
@using Raftel.Shared.SelectableItems
@using Syncfusion.Blazor.DropDowns
@typeparam TItem where TItem : class

<div class="form-field @(Field.FullSpan ? "wide" : string.Empty) @(Field.LabelPosition is LabelPosition.Top ? "label-top" : string.Empty)">
    <div class="form-field-label" style=" @(Field.LabelPosition is LabelPosition.Top ? "align-self: flex-start;" : string.Empty)">
        <label>@Field.DisplayName</label>
    </div>

    @if (Field.LabelPosition is LabelPosition.Left)
    {
        <div class="separator"></div>
    }

    <div class="field">
        @if (Field.Type is FieldType.Text)
        {
            <SfTextBox FloatLabelType="@FloatLabelType.Never"
                       Value="@GetTextBoxValue(Field)"
                       ValueChanged="(value) => OnValueChanged(value, Field)">
            </SfTextBox>
        }
        else if (Field is DateOnlyField dateFormField)
        {
            <SfDatePicker TValue="DateTime?"
                          FullScreen="true"
                          Value="@GetDateTimeValue(Field)"
                          ShowClearButton="true"
                          Min="@(dateFormField.Min ?? DateTime.MinValue)"
                          Max="@(dateFormField.Max ?? DateTime.MaxValue)"
                          Format="@(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)"
                          ValueChanged="(args) => OnValueChanged(args, Field)"/>
        }
        else if (Field is TimeOnlyField timeOnlyField)
        {
            <SnTimeField
                Value="@GetTimeOnlyValue(Field)"
                Min="@timeOnlyField.Min"
                Max="@timeOnlyField.Max"
                OnValueChanged="(args) => OnValueChanged(args, Field)">
            </SnTimeField>
        }
        else if (Field is ColorField colorField)
        {
            <SfColorPicker
                ShowButtons="false"
                Value="@GetTextBoxValue(Field)"
                Mode="ColorPickerMode.Picker"
                ModeSwitcher="false"
                ValueChanged="(value) => OnValueChanged(value, Field)"/>
        }
        else if (Field.Type is FieldType.Selectable)
        {
            <SnComboBox TItem="object"
                        SelectedItem="@GetComboValue(Field)"
                        GetDataFn="(args) => GetComboValues(args, Field)"
                        PropertyToShow="@(nameof(ISelectableItem.Name))"
                        ValueChanged="(args) => OnValueChanged(args, Field)">
            </SnComboBox>
        }
        else if (Field.Type is FieldType.Numeric)
        {
            var fieldAsNumeric = Field as NumericField;

            <SnDecimalTextBox
                Value="@GetDecimalValue(Field)"
                Format="@fieldAsNumeric.Format"
                Max="@fieldAsNumeric.Max"
                Min="@fieldAsNumeric.Min"
                NumberOfDecimals="@fieldAsNumeric.NumberOfDecimals"
                ValueChanged="(args) => OnValueChanged(args, Field)">

            </SnDecimalTextBox>
        }
        else if (Field.Type is FieldType.Boolean)
        {
            <SnSwitch
                Checked="@GetBooleanValue(Field)"
                ValueChanged="(args) => OnValueChanged(args, Field)">
            </SnSwitch>
        }
    </div>
</div>