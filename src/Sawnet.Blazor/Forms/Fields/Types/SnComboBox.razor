@using Sawnet.Shared
@using Syncfusion.Blazor.DropDowns
@inherits SnComponentBase
@typeparam TItem

<SfAutoComplete
    @ref="_autoComplete"
    TValue="string"
    TItem="TItem"
    Value="Value"
    ValueChanged="OnFieldValueChangedAsync"
    ShowPopupButton="true">
    <AutoCompleteFieldSettings Value="@PropertyToShow"/>
    <AutoCompleteEvents TItem="TItem"
                        TValue="string"
                        OnOpen="async (args) => await OnOpenAsync(args)"
                        ValueChange="OnValueChangedAsync"
                        OnValueSelect="OnItemSelectedAsync">
    </AutoCompleteEvents>
</SfAutoComplete>

@code {

    private SfAutoComplete<string, TItem> _autoComplete;
    [Parameter] public string PropertyToShow { get; set; }

    [Parameter] public Func<string, Task<IEnumerable<TItem>>> GetDataFn { get; set; }

    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter] public TItem SelectedItem { get; set; }

    public string Value { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SelectedItem is not null)
        {
            await _autoComplete.DataManager.Insert<TItem>(SelectedItem);
            Value = SelectedItem.ToString();
            StateHasChanged();
        }
    }

    private async Task LoadAsync(string filter)
    {
        var items = await GetDataFn(filter);

        _autoComplete.DataSource = items;
    }

    private async Task OnOpenAsync(BeforeOpenEventArgs args)
    {
        await LoadAsync(string.Empty);
    }

    private Task OnValueChangedAsync(ChangeEventArgs<string, TItem> arg)
    {
        if (arg.ItemData is null)
        {
            Value = null;
            SelectedItem = default;
        }

        return Task.CompletedTask;
    }

    private async Task OnItemSelectedAsync(SelectEventArgs<TItem> arg)
    {
        if (ValueChanged.HasDelegate)
        {
            Value = arg.ItemData?.ToString();
            await ValueChanged.InvokeAsync(arg.ItemData);
        }
    }

    private async Task OnFieldValueChangedAsync(string arg)
    {
        if (arg is null)
        {
            Value = null;
            SelectedItem = default;
            await ValueChanged.InvokeAsync();
        }
    }

}