@typeparam TItem where TItem : class
@typeparam TSetup where TSetup : GridSetup<TItem> 
@using Sawnet.Blazor.Buttons
@using System.Collections.ObjectModel
@using Sawnet.Blazor.Grid.Columns
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@inherits SnComponentBase

<div class="sn-grid-container">
    <div class="toolbar-container">
        <div>
            @Title
        </div>
        @if (OnCreateClicked.HasDelegate)
        {
            <SnButton Icon="fas fa-plus" Text="Common.Add" OnClick="@(async () => await OnCreateClickedAsync())"/>
        }
        @if (OnEditClicked.HasDelegate)
        {
            <SnButton Icon="fas fa-pen" Text="Common.Edit" OnClick="@(async () => await OnEditClickedAsync())"/>
        }
        @if (OnDeleteClicked.HasDelegate)
        {
            <SnButton Icon="fas fa-trash-alt" Text="Common.Delete" OnClick="@(async () => await OnDeleteClickedAsync())"/>
        }
    </div>
    <div class="grid-container">
        <SfGrid
            @ref="_grid"
            TValue="TItem"
            DataSource="Data"
            AllowSelection="true"
            AllowPaging="true"
            Width="100%"
            RowHeight="30">
            <GridSelectionSettings Type="GetSelectionType()" />
            <GridPageSettings @ref="_pageSettings" PageSize="25" />
            <GridEvents RowDropped="OnSelectionChangedAsync" 
                        RowSelected="OnSelectionChangedAsync" 
                        RowDeselected="OnSelectionChangedAsync" TValue="TItem" />

            <GridColumns>
                @if (Setup != null)
                {
                    @foreach (var column in Setup.Columns)
                    {
                        if (column is TextColumn textGridColumn)
                        {
                            <GridColumn
                                Field="@textGridColumn.PropertyName"
                                HeaderText="@textGridColumn.DisplayName"
                                TextAlign="@textGridColumn.TextAlign"
                                Visible="textGridColumn.Visible"
                                IsFrozen="column.Freeze"
                                MinWidth="@column.Width"
                                Width="@column.Width"/>
                        }
                    }
                }
            </GridColumns>
        </SfGrid>
    </div>
</div>