<#@ template language="C#" #>
<#@ import namespace="Shared" #>
using <#= ApplicationStructure.AppName #>.Core.<#= EntityInfo.PluralName #>;
using <#= ApplicationStructure.AppName #>.Core.<#= EntityInfo.PluralName #>.ValueObjects;
using Sawnet.Application.Cqrs.Commands;
using Sawnet.Core.Results;

namespace <#= ApplicationStructure.AppName #>.Application.<#= EntityInfo.PluralName #>.Commands.Create;

public class <#= Name #> : ICommandHandler<Create<#= EntityInfo.SingularName #>Command, Result<<#= EntityInfo.SingularName #>>>
{
    private readonly <#= EntityInfo.RepoInterfaceType #> <#= EntityInfo.RepoField #>;

    public <#= Name #>(<#= EntityInfo.RepoInterfaceType #> <#= EntityInfo.RepoVariable #>)
    {
        <#= EntityInfo.RepoField #> = <#= EntityInfo.RepoVariable #>;
    }

    public async Task<Result<<#= EntityInfo.SingularName #>>> Handle(Create<#= EntityInfo.SingularName #>Command command, CancellationToken token = default)
    {
        var <#= EntityInfo.EntityVariable #> = <#= EntityInfo.SingularName #>.Create((<#= EntityInfo.SingularName #>Id)Guid.NewGuid());

        await <#= EntityInfo.RepoField #>.InsertAsync(<#= EntityInfo.EntityVariable #>);
        
        return Result.Ok(<#= EntityInfo.EntityVariable #>);
    }
}<#+
    public EntityInfo EntityInfo { get; set; }

    public string Name => $"Create{EntityInfo?.SingularName}CommandHandler";
#>